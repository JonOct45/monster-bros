"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var P = _interopRequireWildcard(require("@react-pdf/primitives"));

var _stylesheet = _interopRequireDefault(require("@react-pdf/stylesheet"));

var isLink = function isLink(node) {
  return node.type === P.Link;
};

var LINK_STYLES = {
  color: 'blue',
  textDecoration: 'underline'
};
/**
 * Computes styles using stylesheet
 *
 * @param {Object} container
 * @param {Object} document node
 * @returns {Object} computed styles
 */

var computeStyle = function computeStyle(container, node) {
  var overrideStyle = isLink(node) ? LINK_STYLES : {};
  var baseStyle = Array.isArray(node.style) ? [].concat(node.style, [overrideStyle]) : Object.assign({}, overrideStyle, node.style);
  return (0, _stylesheet.default)(container, baseStyle);
};
/**
 * Resolves node styles
 *
 * @param {Object} container
 * @param {Object} document node
 * @returns {Object} node (and subnodes) with resolved styles
 */


var resolveNodeStyles = function resolveNodeStyles(container) {
  return function (node) {
    var style = computeStyle(container, node);
    if (!node.children) return Object.assign({}, node, {
      style: style
    });
    var children = node.children.map(resolveNodeStyles(container));
    return Object.assign({}, node, {
      style: style,
      children: children
    });
  };
};
/**
 * Resolves page styles
 *
 * @param {Object} document page
 * @returns {Object} document page with resolved styles
 */


var resolvePageStyles = function resolvePageStyles(page) {
  var container = page.box || page.style;
  return resolveNodeStyles(container)(page);
};
/**
 * Resolves document styles
 *
 * @param {Object} document root
 * @returns {Object} document root with resolved styles
 */


var resolveStyles = function resolveStyles(root) {
  if (!root.children) return root;
  var children = root.children.map(resolvePageStyles);
  return Object.assign({}, root, {
    children: children
  });
};

var _default = resolveStyles;
exports.default = _default;