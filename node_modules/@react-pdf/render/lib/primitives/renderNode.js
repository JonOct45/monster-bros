"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var P = _interopRequireWildcard(require("@react-pdf/primitives"));

var _renderSvg = _interopRequireDefault(require("./renderSvg"));

var _renderText = _interopRequireDefault(require("./renderText"));

var _renderPage = _interopRequireDefault(require("./renderPage"));

var _renderNote = _interopRequireDefault(require("./renderNote"));

var _renderImage = _interopRequireDefault(require("./renderImage"));

var _renderDebug = _interopRequireDefault(require("./renderDebug"));

var _renderCanvas = _interopRequireDefault(require("./renderCanvas"));

var _renderBorders = _interopRequireDefault(require("./renderBorders"));

var _renderBackground = _interopRequireDefault(require("./renderBackground"));

var _setLink = _interopRequireDefault(require("../operations/setLink"));

var _clipNode = _interopRequireDefault(require("../operations/clipNode"));

var _transform = _interopRequireDefault(require("../operations/transform"));

var _setDestination = _interopRequireDefault(require("../operations/setDestination"));

var _renderFns;

var isRecursiveNode = function isRecursiveNode(node) {
  return node.type !== P.Text && node.type !== P.Svg;
};

var renderChildren = function renderChildren(ctx, node) {
  ctx.save();

  if (node.box) {
    ctx.translate(node.box.left, node.box.top);
  }

  var children = node.children || [];

  var renderChild = function renderChild(child) {
    return renderNode(ctx, child);
  };

  children.forEach(renderChild);
  ctx.restore();
};

var renderFns = (_renderFns = {}, _renderFns[P.Text] = _renderText.default, _renderFns[P.Note] = _renderNote.default, _renderFns[P.Image] = _renderImage.default, _renderFns[P.Canvas] = _renderCanvas.default, _renderFns[P.Svg] = _renderSvg.default, _renderFns[P.Link] = _setLink.default, _renderFns);

var renderNode = function renderNode(ctx, node) {
  var _node$style;

  var overflowHidden = ((_node$style = node.style) === null || _node$style === void 0 ? void 0 : _node$style.overflow) === 'hidden';
  var shouldRenderChildren = isRecursiveNode(node);
  if (node.type === P.Page) (0, _renderPage.default)(ctx, node);
  ctx.save();
  if (overflowHidden) (0, _clipNode.default)(ctx, node);
  (0, _transform.default)(ctx, node);
  (0, _renderBackground.default)(ctx, node);
  (0, _renderBorders.default)(ctx, node);
  var renderFn = renderFns[node.type];
  if (renderFn) renderFn(ctx, node);
  if (shouldRenderChildren) renderChildren(ctx, node);
  (0, _setDestination.default)(ctx, node);
  (0, _renderDebug.default)(ctx, node);
  ctx.restore();
};

var _default = renderNode;
exports.default = _default;