"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fns = require("@react-pdf/fns");

var _lineIndexAtHeight = _interopRequireDefault(require("./lineIndexAtHeight"));

var _heightAtLineIndex = _interopRequireDefault(require("./heightAtLineIndex"));

var getLineBreak = function getLineBreak(node, height) {
  var top = (0, _fns.get)(node, ['box', 'top'], 0);
  var widows = (0, _fns.get)(node, ['props', 'widows'], 2);
  var orphans = (0, _fns.get)(node, ['props', 'orphans'], 2);
  var linesQuantity = node.lines.length;
  var slicedLine = (0, _lineIndexAtHeight.default)(node, height - top);

  if (slicedLine === 0) {
    return 0;
  }

  if (linesQuantity < orphans) {
    return linesQuantity;
  }

  if (slicedLine < orphans || linesQuantity < orphans + widows) {
    return 0;
  }

  if (linesQuantity === orphans + widows) {
    return orphans;
  }

  if (linesQuantity - slicedLine < widows) {
    return linesQuantity - widows;
  }

  return slicedLine;
}; // Also receives contentArea in case it's needed


var splitText = function splitText(node, height) {
  var slicedLineIndex = getLineBreak(node, height);
  var currentHeight = (0, _heightAtLineIndex.default)(node, slicedLineIndex);
  var nextHeight = node.box.height - currentHeight;
  var current = Object.assign({}, node, {
    box: (0, _extends2.default)({}, node.box, {
      height: currentHeight,
      borderBottomWidth: 0
    }),
    style: (0, _extends2.default)({}, node.style, {
      marginBottom: 0,
      paddingBottom: 0,
      borderBottomWidth: 0,
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    }),
    lines: node.lines.slice(0, slicedLineIndex)
  });
  var next = Object.assign({}, node, {
    box: (0, _extends2.default)({}, node.box, {
      top: 0,
      height: nextHeight,
      borderTopWidth: 0
    }),
    style: (0, _extends2.default)({}, node.style, {
      marginTop: 0,
      paddingTop: 0,
      borderTopWidth: 0,
      borderTopLeftRadius: 0,
      borderTopRightRadius: 0
    }),
    lines: node.lines.slice(slicedLineIndex)
  });
  return [current, next];
};

var _default = splitText;
exports.default = _default;