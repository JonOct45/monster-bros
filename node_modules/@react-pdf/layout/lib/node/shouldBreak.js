"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.default = void 0;

var _getWrap = _interopRequireDefault(require("./getWrap"));

var _getNodesHeight = _interopRequireDefault(require("./getNodesHeight"));

/* eslint-disable no-continue */
var getBreak = function getBreak(node) {
  var _node$props;

  return ((_node$props = node.props) === null || _node$props === void 0 ? void 0 : _node$props.break) || false;
};

var getMinPresenceAhead = function getMinPresenceAhead(node) {
  var _node$props2;

  return (_node$props2 = node.props) === null || _node$props2 === void 0 ? void 0 : _node$props2.minPresenceAhead;
};

var defaultPresenceAhead = function defaultPresenceAhead(element) {
  return function (height) {
    return Math.min(element.box.height, height);
  };
};

var getPresenceAhead = function getPresenceAhead(elements, height) {
  var result = 0;

  for (var i = 0; i < elements.length; i += 1) {
    var element = elements[i];
    if (!element.box) continue;
    var isElementInside = height > element.box.top;
    var presenceAhead = element.props.presenceAhead || defaultPresenceAhead(element);

    if (element && isElementInside) {
      result += presenceAhead(height - element.box.top);
    }
  }

  return result;
};

var shouldBreak = function shouldBreak(child, futureElements, height) {
  var minPresenceAhead = getMinPresenceAhead(child);
  var presenceAhead = getPresenceAhead(futureElements, height);
  var futureHeight = (0, _getNodesHeight.default)(futureElements);
  var shouldSplit = height < child.box.top + child.box.height;
  var shouldWrap = (0, _getWrap.default)(child);
  return getBreak(child) || !shouldWrap && shouldSplit || minPresenceAhead < futureHeight && presenceAhead < minPresenceAhead;
};

var _default = shouldBreak;
exports.default = _default;