"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = void 0;

var P = _interopRequireWildcard(require("@react-pdf/primitives"));

var _fns = require("@react-pdf/fns");

var isType = function isType(type) {
  return function (node) {
    return node.type === type;
  };
};

var isLink = isType(P.Link);
var isText = isType(P.Text);
var isTextInstance = isType(P.TextInstance);
/**
 * Checks if node has render prop
 *
 * @param {Object} node
 * @returns {Boolean} has render prop?
 */

var hasRenderProp = function hasRenderProp(node) {
  var _node$props;

  return !!((_node$props = node.props) !== null && _node$props !== void 0 && _node$props.render);
};
/**
 * Checks if node is text type (Text or TextInstance)
 *
 * @param {Object} node
 * @returns {Boolean} are all children text instances?
 */


var isTextType = function isTextType(node) {
  return isText(node) || isTextInstance(node);
};
/**
 * Checks if is tet link that needs to be wrapped in Text
 *
 * @param {Object} node
 * @returns {Boolean} are all children text instances?
 */


var isTextLink = function isTextLink(node) {
  var children = node.children || []; // Text string inside a Link

  if (children.every(isTextInstance)) return true; // Text node inside a Link

  if (children.every(isText)) return false;
  return children.every(isTextType);
};
/**
 * Wraps node children inside Text node
 *
 * @param {Object} node
 * @returns {Boolean} node with intermediate Text child
 */


var wrapText = function wrapText(node) {
  var textElement = {
    type: P.Text,
    props: {},
    style: {},
    box: {},
    children: node.children
  };
  return Object.assign({}, node, {
    children: [textElement]
  });
};

var transformLink = function transformLink(node) {
  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will
  // ultimately render the inline Link via the textkit PDF renderer.

  if (hasRenderProp(node)) return Object.assign({}, node, {
    type: P.Text
  }); // If is a text link (either contains Text or TextInstalce), wrap it
  // inside a Text element so styles are applied correctly

  if (isTextLink(node)) return wrapText(node);
  return node;
};
/**
 * Transforms Link layout to correctly render text and dynamic rendered links
 *
 * @param {Object} node
 * @returns {Object} node with link substitution
 */


var resolveLinkSubstitution = function resolveLinkSubstitution(node) {
  if (!node.children) return node;
  var resolveChild = (0, _fns.compose)(transformLink, resolveLinkSubstitution);
  var children = node.children.map(resolveChild);
  return Object.assign({}, node, {
    children: children
  });
};

var _default = resolveLinkSubstitution;
exports.default = _default;